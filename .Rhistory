glm_fit <- cv.glmnet(x,y, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
glm_model <- glmnet(x,y, alpha = 1, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
#checking for multicolinearity where we expected it:
print(paste("Correlation between x1 & x6:",round(cor(x1,x6),2)))
print(paste("Correlation between x3 & x4:",round(cor(x3,x4),2)))
print(paste("Correlation between x3 & x5:",round(cor(x3,x5),2)))
plot(glm_fit)
summary(glm_model)
summary(glm_fit)
hist(y)
rbinom(1,1,.3)
rbinom(1,1,.3)
rbinom(1,1,.3)
rbinom(1,1,.3)
rbinom(1,1,.3)
rbinom(1,1,.3)
rbinom(1,1,.3)
c1 <- sapply(y, rbinom(1,1,y/200))
#create categorical variable
cat_sample <- function(v){
return(rbinom(1,1,y/200))
}
c1 <- sapply(y, cat_sample)
df <- data.frame(y,x1,x2,x3,x4,x5, x6, x7,c1)
lm_model <- lm(y ~ ., data = df)
#R2 of .8147 and RSE of 10.09 and we can see that x1 is not very significant
summary(lm_model)
#create categorical variable
cat_sample <- function(v){
return(rbinom(1,1,v/200))
}
c1 <- sapply(y, cat_sample)
x7 <- rnorm(n, 0, 5) +7
df <- data.frame(y,x1,x2,x3,x4,x5, x6, x7,c1)
lm_model <- lm(y ~ ., data = df)
#R2 of .8147 and RSE of 10.09 and we can see that x1 is not very significant
summary(lm_model)
#convert to matrices for glm
x = model.matrix(y ~ ., df)
View(x)
y = df$y
glm_fit <- cv.glmnet(x,y, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
glm_model <- glmnet(x,y, alpha = 1, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
plot(glm_fit)
#R2 of .8147 and RSE of 10.09 and we can see that x1 is not very significant
summary(lm_model)
df$c1 <- as.factor(df$c1)
lm_model <- lm(y ~ ., data = df)
#R2 of .8147 and RSE of 10.09 and we can see that x1 is not very significant
summary(lm_model)
#convert to matrices for glm
x = model.matrix(y ~ ., df)
y = df$y
glm_fit <- cv.glmnet(x,y, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
glm_model <- glmnet(x,y, alpha = 1, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
glm_fit <- cv.glmnet(x,y, alpha = 0)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
glm_model <- glmnet(x,y, alpha = 1, nlambda = 100)
glm_model <- glmnet(x,y, alpha = 0, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
install.packages("glmnetUtils")
library(glmnetUtils)
glm_model <- glmnet(x,y, alpha = 0, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
glm_model <- glmnet(y~., data = df, alpha = 0, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
View(df)
glm_model$call
glm_model <- glmnet(x,y, data = df, alpha = 0, nlambda = 100)
glm_model <- glmnet(x,y, alpha = 0, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
glm_model <- glmnet(y~.,data = df, alpha = 0, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
cva.glmnet(y~.,data = df)
cross_alpha <- cva.glmnet(y~.,data = df)
plot(cross_alpha)
glm_fit <- cv.glmnet(x,y, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
glm_model <- glmnet(y~.,data = df, alpha = 1, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
plot(cross_alpha)
plot(cross_alpha, title = "sfs")
plot(cross_alpha, main = "sfs")
plot(cross_alpha, main = "Lighter means alpha closer to 1 thus full lasso")
glm_fit <- cv.glmnet(y~.,data = df, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
glm_fit <- cv.glmnet(y~.,data = df, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
glm_model <- glmnet(y~.,data = df, alpha = 1, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
glm_fit <- cv.glmnet(y~.,data = df, alpha = 1)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
plot(glm_fit)
glm_model <- glmnet(y~.,data = df, alpha = 1, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
glm_fit <- cv.glmnet(y~.,data = df, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
glm_fit <- cv.glmnet(y~.,data = df, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
glm_fit <- cv.glmnet(y~.,data = df, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
glm_fit <- cv.glmnet(y~.,data = df, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
View(x)
View(df)
setwd("~/Bootcamp/House_project")
library(tidyverse)
library(glmnet)
library(plotmo)
train <- read_csv("train.csv")
col_types <- sapply(train,class)
to_factor <- names(col_types[col_types == "character"])
#For character columns replace na with "NA"
#FOr numeric, repace na with 0
train_f <- train[to_factor]
train_n <- train%>%
select(-to_factor)
train_f[is.na(train_f)] <- "Data_Missing"
train_n[is.na(train_n)] <- 0
train_processed <- cbind(train_f, train_n)
train_processed[to_factor] <- lapply(train_processed[to_factor], as.factor)
View(train_processed)
x = model.matrix(SalePrice ~ ., train_processed)
y = train_processed$SalePrice
View(x)
size(x)
dim(x)
dim(x)[1]
print(paste("There are",dim(x)[2], "features w/ dummy variables"))
glm_fit <- cv.glmnet(x,y, alpha = 1)
plot(glm_fit)
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
bestlambda = glm_fit$lambda.min
print(paste("best log lambda value:",round(bestlambda,2)))
glm_model <- glmnet(x,y, alpha = 1, nlambda = 100)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
plot(glm_fit)
log(bestlambda)
bestlambda = log(glm_fit$lambda.min)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
class(glm_model)
plot(glm_fit)
glm_fit$nzero
glm_fit$glmnet.fit
print(paste("best log lambda value:",round(bestlambda,2)))
glm_fit$lambda
glm_fit$nzero
glm_fit$name
glm_fit$lambda.1se
13+09
1e+09
sqrt(1e+09)
summary(glm_model)
glm_model$glmnet.fit$dev.ratio[which(fitnet$glmnet.fit$lambda == fitnet$lambda.min)]
glm_fit$cvm/var(y)
min(glm_fit$cvm/var(y))
max(glm_fit$cvm/var(y))
1 - min(glm_fit$cvm/var(y))
print(paste("R Squared value of",R2))
#get R2
R2 <- 1 - min(glm_fit$cvm/var(y))
print(paste("R Squared value of",R2))
print(paste("R Squared value of",round(R2,2)))
knitr::opts_chunk$set(echo = TRUE)
Baseline_Model <- lm(SalePrice ~., data = train_processed)
summary(Baseline_Model)
print(paste("R Squared value of",round(R2,2)))
plot(glm_fit$cvm)
plot(glm_fit$cvm, glm_fit$lambda)
plot(glm_fit$lambda,glm_fit$cvm)
plot(log(glm_fit$lambda),glm_fit$cvm)
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
min(glm_fit$cvm)
sqrt(min(glm_fit$cvm))
CVK <- sqrt(min(glm_fit$cvm))
print(paste("R Squared value of best model",round(R2,2)))
print(paste("Cross validated MSE",round(CVK,2)))
var(y)
sd(y)
min(glm_fit$cvm)
glm_fit$lambda
glm_model <- glmnet(x,y, alpha = 1, nlambda = 100)
glm_model <- glmnet(x,y, alpha = 1, nlambda = 100)
deviance(glm_model)
deviance(glm_fit)
y_hat <- predict(glm_model,X)
y_hat <- predict(glm_model,x)
View(y_hat)
bestlambda = glm_fit$lambda.min
y_hat <- predict(glm_model,x, s = bestlambda)
install.packages("mltools")
mse(y, y_hat)
library(MLtools)
library(mltools)
mse(y, y_hat)
cor(y, y_hat)
(cor(y, y_hat)^2
)
bestlambda
plot_glmnet(glm_model)+ abline(v = bestlambda, lwd = 2)
glm_fit$lambda
plot(glm_fit)
plot(glm_model)
plot(glm_fit)
mse(y, y_hat)
y_hat <- predict(glm_model,x, s = 500)
library(mltools)
mse(y, y_hat)
y_hat <- predict(glm_model,x, s = 100)
mse(y, y_hat)
glm_model <- glmnet(x,y, alpha = 1, lambda = bestlambda)
y_hat <- predict(glm_model,x, s = 100)
mse(y, y_hat)
cor(y, y_hat)
cor(y, y_hat)^2
glm_model$a0
glm_model$beta
glm_model$lambda
selected <- glm_model$beta
class(selected)
selected
View(selected)
names(selected)
selected[1]
selected[2]
selected[2,]
selected
glm_fit$nzero
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)  #Data wrangling and plotting
library(scales)     #Formatting axis
train <- read_csv("train.csv")
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
View(train)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice, fill = "MSZoning"))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice, fill = MSZoning))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice, fill = MSZoning))+
geom_point(fill = MSZoning)+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice, color = MSZoning))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice, color = MSSubClass))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice, color = Neighborhood))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice, color = MSSubClass))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice, color = MSZoning))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
facet_wrap(~MSZoning)
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
facet_wrap(~Neighborhood)
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea))+
geom_histogram(bins = 80)+
labs(title = "Histogram of Lot Area (Sqaure Feet)",
y = "Count",
x = "Lot Area (Square Feet)")
train %>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
facet_wrap(~MSZoning)
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
filter(MSZoning = "FV")%>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
filter(MSZoning == "FV")%>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
facet_wrap(~MSZoning)
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
filter(MSZoning == "RL")%>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
facet_wrap(~MSZoning)
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train %>%
filter(MSZoning == "C (all)")%>%
ggplot(aes(LotArea, SalePrice))+
geom_point()+
labs(title = "Sale Price Vs Lot Area (Square Feet)",
y = "Sale Price",
x = "Lot Area (Sqaure Feet)")+
scale_y_continuous(labels = comma)
train1 <- train %>%
mutate(total_sqf = TotalBsmtSF + 1stFlrSF + 2ndFlrSF)%>%
mutate(price_per_sqft = total_sqf/SalePrice)
train1 <- train %>%
mutate(total_sqf = TotalBsmtSF + 1stFlrSF + 2ndFlrSF)
train1 <- train %>%
mutate(total_sqf = TotalBsmtSF + `1stFlrSF` + `2ndFlrSF`)%>%
mutate(price_per_sqft = total_sqf/SalePrice)
train1 %>%
ggplot(aes(Neighborhood,price_per_sqft))+
geom_bar()+
coord_flip()
train1 %>%
ggplot(aes(Neighborhood,price_per_sqft))+
geom_boxplot()+
coord_flip()
library(cluster)    # clustering algorithms
library(factoextra)
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(train1, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
